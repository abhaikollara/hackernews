{"version":3,"sources":["components/Navbar/Navbar.js","components/StoryList/Story/Story.js","components/StoryList/StoryList.js","components/Pagination/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","id","onClick","clickHandler","StoryInfo","this","story","score","descendants","target","url","split","Component","Story","state","title","loaded","_this2","fetch","itemID","then","res","json","setState","index","page","storiesPerPage","Story_StoryInfo","StoryList","items","i","componentDidMount","_this","loadStories","componentDidUpdate","type","slice","_this3","map","item","StoryList_Story_Story","key","Paginator","aria-label","App","itemsPerPage","currentPage","storyType","storyTypeHandler","e","console","log","pageChangeHandler","style","width","components_Navbar_Navbar","components_StoryList_StoryList","Pagination","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.325ab974.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = props => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <a\n        className=\"navbar-brand\"\n        href=\"#\"\n        id=\"top\"\n        onClick={props.clickHandler}\n      >\n        HackerNews\n      </a>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link\"\n              href=\"#\"\n              onClick={props.clickHandler}\n              id=\"top\"\n            >\n              Top\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link\"\n              href=\"#\"\n              onClick={props.clickHandler}\n              id=\"new\"\n            >\n              New\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link\"\n              href=\"#\"\n              onClick={props.clickHandler}\n              id=\"best\"\n            >\n              Best\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link\"\n              href=\"#\"\n              onClick={props.clickHandler}\n              id=\"show\"\n            >\n              Show\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link\"\n              href=\"#\"\n              onClick={props.clickHandler}\n              id=\"ask\"\n            >\n              Ask\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass StoryInfo extends Component {\n  render() {\n    return (\n      <div>\n        <small>\n          <span className=\"badge badge-primary\">{this.props.story.score}</span>\n          {\" points \"}\n          <span className=\"badge badge-primary\">\n            {this.props.story.descendants}\n          </span>{\" \"}\n          <a\n            href={\"https://news.ycombinator.com/item?id=\" + this.props.story.id}\n            target=\"_blank\"\n          >\n            {\"comments\"}\n          </a>{\" \"}\n          {this.props.story.url ? (\n            <span className=\"badge badge-light\">\n              {this.props.story.url.split(\"//\")[1].split(\"/\")[0]}\n            </span>\n          ) : null}\n        </small>\n      </div>\n    );\n  }\n}\n\nclass Story extends Component {\n  state = {\n    story: {\n      id: 0,\n      title: \"\",\n      url: \"\",\n      score: 0,\n      descendants: 0\n    },\n    loaded: false\n  };\n\n  componentDidMount() {\n    // console.log(this.props.itemID);\n    fetch(\n      \"https://hacker-news.firebaseio.com/v0/item/\" +\n        this.props.itemID +\n        \".json\"\n    )\n      .then(res => res.json())\n      .then(json =>\n        this.setState({\n          story: json,\n          loaded: true\n        })\n      );\n  }\n  render() {\n    return (\n      <a\n        className=\"list-group-item list-group-item-action\"\n        href={this.state.story.url ? this.state.story.url : null}\n      >\n        <div>\n          {this.props.index +\n            this.props.page * this.props.storiesPerPage +\n            1 +\n            \". \"}\n          {this.state.story.title}\n        </div>\n        <StoryInfo story={this.state.story} />\n      </a>\n    );\n  }\n}\n\nexport default Story;\n","import React, { Component } from \"react\";\nimport Story from \"./Story/Story\";\n\nclass StoryList extends Component {\n  state = {\n    items: [],\n    loaded: false\n  };\n  i = 0;\n  loadStories() {\n    fetch(\n      \"https://hacker-news.firebaseio.com/v0/\" +\n        this.props.type +\n        \"stories.json\"\n    )\n      .then(res => res.json())\n      .then(json =>\n        this.setState({\n          loaded: true,\n          items: json.slice(\n            this.props.page * this.props.storiesPerPage,\n            (this.props.page + 1) * this.props.storiesPerPage\n          )\n        })\n      );\n  }\n\n  componentDidMount = () => {\n    this.loadStories();\n  };\n\n  componentDidUpdate = () => {\n    this.loadStories();\n  };\n  render() {\n    // console.log(this.state.items);\n    // this.i += 1;\n    // console.log(this.i);\n    return (\n      <div className=\"list-group\">\n        {this.state.items.map((item, index) => (\n          <Story\n            itemID={item}\n            index={index}\n            key={item}\n            page={this.props.page}\n            storiesPerPage={this.props.storiesPerPage}\n          />\n        ))}\n        {/* {this.state.loaded\n          ? this.state.items.map((item, index) => (\n              <Story\n                itemID={item}\n                index={index}\n                key={item}\n                page={this.props.page}\n                storiesPerPage={this.props.storiesPerPage}\n              />\n            ))\n          : null} */}\n      </div>\n    );\n  }\n}\n\nexport default StoryList;\n","import React, { Component } from \"react\";\n\nclass Paginator extends Component {\n  state = {};\n  render() {\n    return (\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination justify-content-center\">\n          <li className=\"page-item\" onClick={this.props.clickHandler}>\n            <a className=\"page-link\" href=\"#\" id=\"prev\">\n              Previous\n            </a>\n          </li>\n          <li className=\"page-item-disabled\" onClick={this.props.clickHandler}>\n            <div className=\"page-link\">{this.props.page + 1}</div>\n          </li>\n          <li className=\"page-item\" onClick={this.props.clickHandler}>\n            <a className=\"page-link\" href=\"#\" id=\"next\">\n              Next\n            </a>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Paginator;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport StoryList from \"./components/StoryList/StoryList\";\nimport \"./App.css\";\nimport Paginator from \"./components/Pagination/Pagination\";\n\nclass App extends Component {\n  state = {\n    itemsPerPage: 10,\n    currentPage: 0,\n    storyType: \"top\"\n  };\n\n  storyTypeHandler = e => {\n    console.log(e.target[\"id\"]);\n    this.setState({\n      currentPage: 0,\n      storyType: e.target[\"id\"]\n    });\n  };\n\n  pageChangeHandler = e => {\n    console.log(e.target[\"id\"]);\n    if (e.target[\"id\"] == \"next\" && this.state.currentPage < 10) {\n      this.setState({\n        currentPage: this.state.currentPage + 1\n      });\n    } else if (e.target[\"id\"] == \"prev\" && this.state.currentPage > 0) {\n      this.setState({\n        currentPage: this.state.currentPage - 1\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\" style={{ width: \"50rem\" }}>\n        <Navbar clickHandler={this.storyTypeHandler} />\n        <StoryList\n          page={this.state.currentPage}\n          storiesPerPage={this.state.itemsPerPage}\n          type={this.state.storyType}\n        />\n        <Paginator\n          page={this.state.currentPage}\n          clickHandler={this.pageChangeHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}